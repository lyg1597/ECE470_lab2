#include "lab2pkg/lab2.h" 
#define PI 3.14159265359
#define SPIN_RATE 20  /* Hz */

//arrays defining Waypoints
double home[]={120*PI/180,-90*PI/180,90*PI/180,-90*PI/180,-90*PI/180,0};

double arr11[]={129.27*PI/180,-56.85*PI/180,131.41*PI/180,-172.05*PI/180,-87.83*PI/180,0};
double arr12[]={129.1*PI/180,-65.6*PI/180,121.54*PI/180,-143.82*PI/180,-86.41*PI/180,0};
double arr13[]={130.34*PI/180,-72.03*PI/180,117.63*PI/180,-132.04*PI/180,-89.44*PI/180,0};
double arr21[]={142.16*PI/180,-44.4*PI/180,94.11*PI/180,-140.23*PI/180,-87.75*PI/180,0};
double arr22[]={141.86*PI/180,-50.36*PI/180,94.48*PI/180,-136.08*PI/180,-87.01*PI/180,0};
double arr23[]={141.93*PI/180,-54.91*PI/180,92.49*PI/180,-128.93*PI/180,-86.71*PI/180,0};
double arr31[]={162.49*PI/180,-63.2*PI/180,143.76*PI/180,-173.32*PI/180,-90.1*PI/180,0.03*PI/180};
double arr32[]={161.17*PI/180,-74.79*PI/180,144.95*PI/180,-164.91*PI/180,-89.19*PI/180,0.03*PI/180};
double arr33[]={161*PI/180,-86.76*PI/180,140.72*PI/180,-145.74*PI/180,-89.03*PI/180,0.03*PI/180};


// array to define final velocity of point to point moves.  For now slow down to zero once 
// each point is reached
double arrv[]={0,0,0,0,0,0};

//vectors to be used to publish commands to UR3 ROS Driver (ece470_ur3_driver)
std::vector<double> QH (home,home+sizeof(home) / sizeof(home[0]));

std::vector<double> Q11 (arr11,arr11+sizeof(arr11) / sizeof(arr11[0]));
std::vector<double> Q12 (arr12,arr12+sizeof(arr12) / sizeof(arr12[0]));
std::vector<double> Q13 (arr13,arr13+sizeof(arr13) / sizeof(arr13[0]));
std::vector<double> Q21 (arr21,arr21+sizeof(arr21) / sizeof(arr21[0]));
std::vector<double> Q22 (arr22,arr22+sizeof(arr22) / sizeof(arr22[0]));
std::vector<double> Q23 (arr23,arr23+sizeof(arr23) / sizeof(arr23[0]));
std::vector<double> Q31 (arr31,arr31+sizeof(arr31) / sizeof(arr31[0]));
std::vector<double> Q32 (arr32,arr32+sizeof(arr32) / sizeof(arr32[0]));
std::vector<double> Q33 (arr33,arr33+sizeof(arr33) / sizeof(arr33[0]));

std::vector<double> v (arrv,arrv+sizeof(arrv) / sizeof(arrv[0]));

// creating an array of these vectors allows us to iterate through them
// and programatically choose where to go.
std::vector<double> Q [3][3] = {
    {Q11, Q12, Q13},
    {Q21, Q22, Q23},
    {Q31, Q32, Q33}
};

std::vector<double> start[3]={Q11,Q12,Q13};
std::vector<double> end[3]={Q11,Q12,Q13};
std::vector<double> middle[3]={Q11,Q12,Q13};


// Global bool variables that are assigned in the callback associated when subscribed 
// to the "ur3/position" topic
bool isReady=1;
bool pending=0;

// Whenever ur3/position publishes info this callback function is run.
void position_callback(const ece470_ur3_driver::positions::ConstPtr& msg)
{
	isReady=msg->isReady; // When isReady is True the robot arm has made it to its desired position
						  // and is ready to be told to go to another point if desired.
	pending=msg->pending; // pending is the opposite of isReady, pending is true until a new position is reached
//	ROS_INFO("Debug isRdy = %d, pending = %d",(int)isReady,(int)pending);
}


int move_arm(	ros::Publisher pub_command , ros::Rate loop_rate, std::vector<double> dest, float duration)
{
    int error = 0;
    return error;
}

int move_block(ros::Publisher pub_command ,
                ros::Rate loop_rate,
                ros::ServiceClient srv_SetIO,
                ur_msgs::SetIO srv,
                int start_loc,
                int start_height,
                int end_loc,
                int end_height)
{
    int error = 0;
    return error;
}


int main(int argc, char **argv)
{
  int start_pos;
  int end_pos;
	int inputdone = 0;
	int Loopcnt = 0;
//initialization & variable definition
	ros::init(argc, argv, "lab2node");	//initialzation of ros required for each Node.
	ros::NodeHandle nh;				//handler for this node.
	
	//initialized publisher ur3/command, buffer size of 10.
	ros::Publisher pub_command=nh.advertise<ece470_ur3_driver::command>("ur3/command",10);
	// initialize subscriber to ur3/position and call function position_callback each time data is published
	ros::Subscriber sub_position=nh.subscribe("ur3/position",1,position_callback);
	
	ros::ServiceClient srv_SetIO = nh.serviceClient<ur_msgs::SetIO>("ur_driver/set_io");
	ur_msgs::SetIO srv;

	ece470_ur3_driver::command driver_msg;

	std::string inputString;
	
	while (!inputdone) {
		std::cout << "Enter start position <Either 1 2 or 3>";
		std::getline(std::cin, inputString);
		std::cout << "You entered " << inputString << "\n";
		if (inputString == "1") {
			std::cout<<"2";
			

			std::cout<<"3";
			
//			start[0]=Q11;
			std::cout<<"4";
			inputdone = 2;
	//		start[1]=Q12;


			std::cout<<"5";
		//	start[2]=Q13;
			std::cout<<"6";
			start_pos=1;
			
		} else if (inputString == "2") {
			/*
			inputdone = 1;
			start[0]=Q21;
			start[1]=Q22;
			start[2]=Q23;
			start_pos=2;
			*/
		} else if (inputString == "3") {
			/*
			inputdone = 1;
			start[0]=Q31;
			start[1]=Q32;
			start[2]=Q33;
			start_pos=3;
			*/
		} else {
			std::cout << "Please just enter the character 1 2 or 3\n\n";
		}
	}
	
	
	while (!inputdone) {
		std::cout << "Enter end position <Either 1 2 or 3>";
		std::getline(std::cin, inputString);
		std::cout << "You entered " << inputString << "\n";
		if (inputString == "1") {
			inputdone = 1;
			end[0]=Q11;
			end[1]=Q12;
			end[2]=Q13;
			end_pos=1;
		} else if (inputString == "2") {
			inputdone = 1;
			end[0]=Q21;
			end[1]=Q22;
			end[2]=Q23;
			end_pos=2;
		} else if (inputString == "3") {
			inputdone = 1;
			end[0]=Q31;
			end[1]=Q32;
			end[2]=Q33;
			end_pos=3;
		} else {
			std::cout << "Please just enter the character 1 2 or 3\n\n";
		}
	}
	
	middle[0]=Q[6-start_pos-end_pos][0];
	middle[1]=Q[6-start_pos-end_pos][1];
	middle[2]=Q[6-start_pos-end_pos][2];
	
	Loopcnt=1;

	while(!ros::ok()){};	//check if ros is ready for operation
		
	ROS_INFO("sending Goals");

	ros::Rate loop_rate(SPIN_RATE); // Initialize the rate to publish to ur3/command
	int spincount = 0;
 
	while(Loopcnt > 0) {
		driver_msg.destination=QH;  // Set desired position to move home 
		pub_command.publish(driver_msg);  // publish command, but note that is possible that
												  // the subscriber will not receive this message.
		spincount = 0;
		while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
			ros::spinOnce();  // Allow other ROS functionallity to run
			loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
			if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
				pub_command.publish(driver_msg);
				ROS_INFO("Just Published again driver_msg");
				spincount = 0;
			}
			spincount++;  // keep track of loop count
		}

		ROS_INFO("waiting for rdy");  // Now wait for robot arm to reach the commanded waypoint.
		while(!isReady)
		{
			ros::spinOnce();
			loop_rate.sleep();
		}

		ROS_INFO("sending Goals 1");
		driver_msg.destination=Q[0][0];
		pub_command.publish(driver_msg);  // publish command, but note that is possible that
												  // the subscriber will not receive this message.
		spincount = 0;
		while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
			ros::spinOnce();  // Allow other ROS functionallity to run
			loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
			if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
				pub_command.publish(driver_msg);
				ROS_INFO("Just Published again driver_msg");
				spincount = 0;
			}
			spincount++;  // keep track of loop count
		}

		ROS_INFO("waiting for rdy");  // Now wait for robot arm to reach the commanded waypoint.
		while(!isReady)
		{
			ros::spinOnce();
			loop_rate.sleep();
		}

		srv.request.fun = 1;
		srv.request.pin = 0;  //Digital Output 0
		srv.request.state = 1.0; //Set DO0 on
		if (srv_SetIO.call(srv)) {
			ROS_INFO("True: Switched Suction ON");
		} else {
			ROS_INFO("False");
		}

		ROS_INFO("sending Goals 2");
		driver_msg.destination=Q[0][1];
		driver_msg.duration=2.0;
		pub_command.publish(driver_msg);  // publish command, but note that is possible that
												  // the subscriber will not receive this message.
		spincount = 0;
		while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
			ros::spinOnce();  // Allow other ROS functionallity to run
			loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
			if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
				pub_command.publish(driver_msg);
				ROS_INFO("Just Published again driver_msg");
				spincount = 0;
			}
			spincount++;  // keep track of loop count
		}

		ROS_INFO("waiting for rdy");  // Now wait for robot arm to reach the commanded waypoint.
		while(!isReady)
		{
			ros::spinOnce();
			loop_rate.sleep();
		}

		srv.request.fun = 1;
		srv.request.pin = 0; // Digital Output 0
		srv.request.state = 0.0; //Set DO0 off
		if (srv_SetIO.call(srv)) {
			ROS_INFO("True: Switched Suction OFF");
		} else {
			ROS_INFO("False");
		}

		ROS_INFO("sending Goals 3");
		driver_msg.destination=Q[0][2];
		driver_msg.duration=1.0;
		pub_command.publish(driver_msg);  // publish command, but note that is possible that
												  // the subscriber will not receive this message.
		spincount = 0;
		while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
			ros::spinOnce();  // Allow other ROS functionallity to run
			loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
			if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
				pub_command.publish(driver_msg);
				ROS_INFO("Just Published again driver_msg");
				spincount = 0;
			}
			spincount++;  // keep track of loop count
		}

		ROS_INFO("waiting for rdy");  // Now wait for robot arm to reach the commanded waypoint.
		while(!isReady)
		{
			ros::spinOnce();
			loop_rate.sleep();
		}
		Loopcnt--;
	}

	return 0;
}
